#!/usr/bin/python

import shutil
import time
from sys import exit
import argparse
from upsiloncommon import *

try:
	from dialog import *
except: 
	print "Could not import `dialog`. Try installing `python-dialog` with your package manager."
	exit(0);

from lxml import etree

parser = argparse.ArgumentParser()
parser.add_argument('--config', help = "The configuration file to edit", default = "/etc/upsilon-node/config.xml")
parser.add_argument('--backup', default = True, action = 'store_true')
args = parser.parse_args()

REGEX_IDENTIFIER = ("^[a-z0-9_]+$", "Please enter an identifier")


def mainMenu():
	global args
	result = dialog.menu("Config file: " + args.config, choices = [
		["addService", "Add Services"], 
		["removeService", "Remove service"], 
		["cleanCheck", "Clean & Check the config"],
		["quit", ""]
	], title = "upsilon-config Main Menu")
	result = result[1]

	{
		"addService": addService,
		"removeService": removeService,
		"cleanCheck": cleanCheck,
		"quit": lambda: exit(0),
		"": lambda: exit(0)
	}[result]()

def prompt(question, minLength = 4, maxLength = 64, regex = ("", "")):
	while True:
		txt = dialog.inputbox(question)
		txt = txt[1]

		if not regex[0] == "" and not re.match(regex[0], txt):
			dialog.msgbox("Your input does not match the regex.");
			continue


		if len(txt) == 0:
			raise RuntimeError("Dialog cancelled");

		if (len(txt) < minLength):
			dialog.msgbox("Your input must be longer than " + str(minLength))
			continue;

		if (len(txt) > maxLength):
			dialog.msgbox("Your input must be shorter than " + str(maxLength))
			continue;

		return txt;

def cleanCheck():
	clearEmptyNodes(dom.getroot())
	checkConfig()
	save()

	dialog.msgbox("Config cleaned and checked.")

def checkConfig():
	pass

def clearEmptyNodes(node):
	pass

def save():
	global args

	if args.backup:
		try:
			backupFilename = args.config + ".backup-" + time.strftime("%Y-%m-%d.%H-%M-%S") + '~'
			shutil.copyfile(args.config, backupFilename)
		except Exception as e:
			error("Can't save, because cannot write backup file to " + backupFilename, e)

	configFile.truncate(0)
	configFile.seek(0)
	configFile.write(etree.tostring(dom, pretty_print = True))

def getCommandTemplates():
	choices = list()
	commands = dom.xpath("//command")

	for command in commands:
		commandTemplate = {}
		commandTemplate["id"] = command.get("id")
		commandTemplate["arguments"] = parseExecForVariableNames(command.get("exec"))

		choices.append(commandTemplate)

	return choices

def parseExecForVariableNames(execLine):
	matches = re.findall('\$([a-zA-Z0-9]+)', execLine)
	
	return matches
		
def removeService():
	choices = list()
	services = dom.xpath("//service")

	if len(services) == 0:
		dialog.msgbox("There are 0 services to remove!")
	else:
		try: 
			for service in services:
				choices.append([ service.get("id"), ""])

			selectedChoice = dialog.menu("Which service?", choices = choices)
			selectedChoice = selectedChoice[1]
			selectedService = (el for el in services if el.get("id") == selectedChoice).next()

			dialog.msgbox("You want to remove " + str(selectedService.get("id")))
			dom.getroot().remove(selectedService)

			save()
		except:
			pass

def selectCommandTemplate(templates):
	choices = list()

	try: 
		index = 0
		for template in templates:
			index += 1
			choices.append([ str(index), template['id'] ])

		selectedChoice = dialog.menu("Command to use as template:", choices = choices)
		selectedChoice = int(selectedChoice[1]) - 1
	except Exception as e:
		print templates
		error("Select command template", e)

	return templates[selectedChoice]

def addService():
	commandTemplates = getCommandTemplates()

	if len(commandTemplates) == 0:
		dialog.msgbox("There are 0 templates defined in the config. \n\nPlease add some <command />'s to your config first.", width = 60)
		return

	try: 
		serviceIdentifier = prompt("Service identifier?", regex = REGEX_IDENTIFIER)	
		selectedTemplate = selectCommandTemplate(commandTemplates)

		elService = etree.Element("service")
		elService.set("id", serviceIdentifier)
		elService.set("commandRef", selectedTemplate.get("id"))

		for argument in selectedTemplate['arguments']:
			argValue = prompt("Value for " + argument, 0, 64)

			elArgument = etree.SubElement(elService, "argument")
			elArgument.set('name', argument)
			elArgument.text = argValue
		
		dom.getroot().append(elService)

		dialog.msgbox("Service added: " + serviceIdentifier)
	except RuntimeError:
		return

	save();

#===============================================================================
try:
	configFile = open(args.config, 'r+')

	p = etree.XMLParser(remove_blank_text=True)
	dom = etree.parse(configFile, parser = p)

	checkConfig()
except Exception as e:
	error("Config is not valid XML: " + str(e))


dialog = Dialog()

while True:
	mainMenu();

configFile.close()

