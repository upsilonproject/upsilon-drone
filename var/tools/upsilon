#!/usr/bin/python

from argparse import ArgumentParser, _SubParsersAction
from upsilon import amqp, config, logger
import pika
import yaml
import json
import os
from prettytable import PrettyTable

class PluginHelper(object):
    args = None
    chan = None

class ExtensibleArgumentParser():
    typeParsers = {}

    ap = config.commonArgumentParser()
    
    def __init__(self):
        self.subparsers = self.ap.add_subparsers(dest = "action")

    def addType(self, name):
        typeParser = self.subparsers.add_parser(name)
        sub = typeParser.add_subparsers(dest = "action_" + name)

        self.typeParsers[name] = {
            "parser": typeParser,
            "subParser": sub,
            "subParserVerbs": {}
        }

    def addVerb(self, typeParser, verb, callback, argument = False):
        p = self.typeParsers[typeParser]["subParser"].add_parser(verb)

        if argument:
            p.add_argument("value")

        self.typeParsers[typeParser]['subParserVerbs'][verb] = { 
            "parser": p,
            "callback": callback
        }

        return p

    def addVerbWithArgument(self, typeParser, verb, callback):
        self.addVerb(typeParser, verb, callback, True)

    def exec_args(self, args, chan):
        action = args.action

        argsD = vars(args)
        verb = argsD["action_" + args.action];
        cb = self.typeParsers[args.action]['subParserVerbs'][verb]['callback']

        helper = PluginHelper()
        helper.args = args;
        helper.chan = chan

        cb(helper)

    def parse_args(self):
        return self.ap.parse_args()

def includePluginDirectory(dirName):
    global eap

    #logger.debug("Looking for plugins in directory: " + dirName)

    if not os.path.isdir(dirName):
        return

    for fname in os.listdir(dirName):
        if fname[-2:] == "py":
            execfile(dirName + "/" + fname)

eap = ExtensibleArgumentParser()

includePluginDirectory("/usr/lib/python2.7/site-packages/upsilon-client-plugins")
includePluginDirectory("/sbin/upsilon-client-plugins/")
includePluginDirectory("upsilon-client-plugins")

args = eap.parse_args()

try: 
    conn = amqp.Connection(args.server, consumeTimeout = args.timeout)
    conn.bind("upsilon.custodian.results")

    eap.exec_args(args, conn);
except amqp.ConsumeTimeout:
    logger.error("Consume timeout")
except KeyboardInterrupt:
    print ""
    logger.error("Ctrl+C")
except pika.exceptions.ConnectionClosed:
    logger.error("Connection closed") 
